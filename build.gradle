plugins {
    id 'net.researchgate.release' version '2.6.0'
    id 'io.codearte.nexus-staging' version '0.11.0'
    id 'com.gradle.plugin-publish' version '0.9.7'
    id 'org.sonarqube' version '2.6.2'
    id 'com.adarshr.test-logger' version '1.1.2'
    id 'java-gradle-plugin'
}

apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'jacoco'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

group 'io.saagie'
version version
description "Gradle plugin to manage Saagie's DataFabric jobs with gradle."

repositories {
    jcenter()
}

configurations {
    compile.exclude module: 'slf4j-impl'
    testCompile.exclude module: 'groovy-all'
    testCompile.exclude module: 'slf4j-impl'
    pom
}

dependencies {
    compile gradleApi()
    compile group: 'com.squareup.okhttp3', name: 'okhttp', version: okhttp
    compile group: 'org.apache.httpcomponents', name: 'httpclient', version: httpclient

    testCompile gradleTestKit()
    testCompile group: 'com.squareup.okhttp3', name: 'mockwebserver', version: mockwebserver
    testCompile group: 'org.spockframework', name: 'spock-core', version: spockCore
    testRuntime group: 'org.objenesis', name: 'objenesis', version: objenesis
    testRuntime group: 'net.bytebuddy', name: 'byte-buddy', version: bytebuddy
}

test {
    testLogging {
        // Make sure output from
        // standard out or error is shown
        // in Gradle output.
        showStandardStreams = true

        // Or we use events method:
        // events 'standard_out', 'standard_error'

        // Or set property events:
        // events = ['standard_out', 'standard_error']

        // Instead of string values we can
        // use enum values:
        // events org.gradle.api.tasks.testing.logging.TestLogEvent.STANDARD_OUT,
        //        org.gradle.api.tasks.testing.logging.TestLogEvent.STANDARD_ERROR,
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier 'javadoc'
    from javadoc.destinationDir
}

task sourceJar(type: Jar, dependsOn: classes) {
    classifier "sources"
    from sourceSets.main.allSource
}

artifacts {
    archives sourceJar, javadocJar
}

signing {
    required signatory != null
    sign configurations.archives
}

release {
    preTagCommitMessage = '[ci skip] pre tag commit:'
    newVersionCommitMessage = '[ci skip] new version commit:'
}

task mergeToDevelop(type: Exec) {
    description 'Merge master to develop'
    commandLine 'git', 'merge', 'master'
}

task switchToDevelop(type: Exec) {
    description 'Checkout develop'
    commandLine 'git', 'checkout', 'develop'
}

task replaceVersionInFiles(type: Task) {
    doLast {
        def readMe = new File('README.md')
        readMe.write(readMe.text.replace(previousVersion, version.toString().replace('-SNAPSHOT', '')))
        def properties = new File('gradle.properties')
        properties.write(properties.text.replace(previousVersion, version.toString().replace('-SNAPSHOT', '')))
    }
}

task prepareDocCommit(type: Exec, dependsOn: replaceVersionInFiles) {
    description 'Replace version number in documentation'
    commandLine 'git', 'add', 'README.md', 'gradle.properties'
}

task commitVersion(type: Exec, dependsOn: prepareDocCommit) {
    description 'Commit version'
    commandLine 'git', 'commit', '-m', '[ci skip] replace readme version.'
}

mergeToDevelop.dependsOn switchToDevelop
updateVersion.dependsOn commitVersion

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/${project.version.endsWith('-SNAPSHOT') ? 'content/repositories/snapshots' : 'service/local/staging/deploy/maven2'}") {
                authentication(userName: project.findProperty('nexusName') ?: '', password: project.findProperty('nexusPassword') ?: '')
            }

            pom.project {
                name project.name
                url 'https://github.com/saagie/gradle-saagie-dataops-plugin'
                packaging 'jar'
                description project.description

                scm {
                    url 'scm:git@github.com:saagie/gradle-saagie-dataops-plugin.git'
                    connection 'scm:git@github.com:saagie/gradle-saagie-dataops-plugin.git'
                    developerConnection 'scm:git@github.com:saagie/gradle-saagie-dataops-plugin.git'
                }

                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }

                developers {
                    developer {
                        id "decampsrenan"
                        name "Renan Decamps"
                        url "https://github.com/decampsrenan"
                    }
                }
            }
        }
    }
}

publishPlugins.dependsOn uploadArchives
afterReleaseBuild.dependsOn publishPlugins

nexusStaging {
    username = project.findProperty('nexusName')
    password = project.findProperty('nexusPassword')
    delayBetweenRetriesInMillis = 10000
}

pluginBundle {
    website = 'http://saagie.com'
    vcsUrl = 'https://github.com/saagie/gradle-saagie-plugin'
    description = project.description
    tags = ['saagie', 'data fabric']

    plugins {
        saagiePlugin {
            id = 'io.saagie.gradle-saagie-plugin'
            displayName = 'Graadle Saagie plugin'
        }
    }
}

jacocoTestReport.dependsOn(test)
tasks.getByName('sonarqube').dependsOn(jacocoTestReport)

task createPluginClasspath {
    def outputDir = file("${buildDir}/resources/test")

    inputs.files sourceSets.test.runtimeClasspath
    outputs.dir outputDir

    doLast {
        outputDir.mkdirs()
        file("${outputDir}/plugin-classpath.txt").text = sourceSets.test.runtimeClasspath.join('\n',)
    }
}

test.dependsOn(createPluginClasspath)

testlogger {
    theme 'mocha'
}
